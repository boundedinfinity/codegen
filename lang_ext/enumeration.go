//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Any change will be overwritten                                                   *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package lang_ext

import (
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

type LanguageExt string
type LanguageExts []LanguageExt

func Slice(es ...LanguageExt) LanguageExts {
	var s LanguageExts

	for _, e := range es {
		s = append(s, e)
	}

	return s
}

const (
	Css  LanguageExt = "css"
	Go   LanguageExt = "go"
	Html LanguageExt = "html"
	Js   LanguageExt = "js"
	Mod  LanguageExt = "mod"
	Ts   LanguageExt = "ts"
)

var (
	All = LanguageExts{
		Css,
		Go,
		Html,
		Js,
		Mod,
		Ts,
	}
)

func Is(v string) bool {
	return All.Is(v)
}

func Parse(v string) (LanguageExt, error) {
	return All.Parse(v)
}

func Strings() []string {
	return All.Strings()
}

func (t LanguageExt) String() string {
	return string(t)
}

var ErrLanguageExtInvalid = errors.New("invalid enumeration type")

func Error(vs LanguageExts, v string) error {
	return fmt.Errorf(
		"%w '%v', must be one of %v",
		ErrLanguageExtInvalid, v, strings.Join(vs.Strings(), ","),
	)
}

func (t LanguageExts) Strings() []string {
	var ss []string

	for _, v := range t {
		ss = append(ss, v.String())
	}

	return ss
}

func (t LanguageExts) Parse(v string) (LanguageExt, error) {
	var o LanguageExt
	var f bool
	n := strings.ToLower(v)

	for _, e := range t {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, Error(t, v)
	}

	return o, nil
}

func (t LanguageExts) Is(v string) bool {
	var f bool

	for _, e := range t {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func (t LanguageExts) Contains(v LanguageExt) bool {
	for _, e := range t {
		if e == v {
			return true
		}
	}

	return false
}

func (t LanguageExt) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *LanguageExt) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := Parse(s)

	if err != nil {
		return err
	}

	*t = e

	return nil
}
