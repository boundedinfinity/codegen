package {{ basePath config.package }}

import (
	"{{ project.module }}/model"
	"{{ project.module }}/service"
	"net/http"

	echo "github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	validator "gopkg.in/go-playground/validator.v9"
)

type Server struct {
	e *echo.Echo
	s *service.Server
}

func New(s *service.Server) *Server {
	return &Server{
		s: s,
	}
}

type customValidator struct {
	validator *validator.Validate
}

func (cv *customValidator) Validate(i interface{}) error {
	if err := cv.validator.Struct(i); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return nil
}


func (t *Server) Serve() error {
	t.e = echo.New()
	t.e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Format: "method=${method}, uri=${uri}, status=${status}\n",
	}))
	t.e.Validator = &customValidator{validator: validator.New()}

{{#each model.paths~}}
{{~#if this.Get}}
    t.e.GET("{{@key}}", {{ operationId @key 'GET' this.Get }})
{{/if}}
{{~#if this.Post}}
    t.e.POST("{{@key}}", {{ operationId @key 'POST' this.Post }})
{{/if}}
{{~#if this.Put}}
    t.e.PUT("{{@key}}", {{ operationId @key 'PUT' this.Put }} )
{{/if}}
{{/each}}

	if err := t.e.Start(":8080"); err != nil {
		return err
	}

	return nil
}















{{#each model.paths as |pathObj path|~}}
{{~#if pathObj.Post}}
{{#with pathObj.Post}}

{{#with this.requestBody.content}}
{{{jdump this}}}
{{#with (lookup . "application/json") }}
{{{jdump this}}}
{{/with}}
{{/with}}


{{/with}}
{{/if}}
{{/each}}