////////////////////////////////////////////////////////////////////////
// Generated by bounded/enumeration
////////////////////////////////////////////////////////////////////////

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

type SchemaTypeEnum string

const (
	SchemaType_Boolean SchemaTypeEnum = "boolean"
	SchemaType_Int     SchemaTypeEnum = "int"
	SchemaType_Long    SchemaTypeEnum = "long"
	SchemaType_Float   SchemaTypeEnum = "float"
	SchemaType_Double  SchemaTypeEnum = "double"
	SchemaType_Byte    SchemaTypeEnum = "byte"
	SchemaType_String  SchemaTypeEnum = "string"
	SchemaType_Complex SchemaTypeEnum = "complex"
	SchemaType_Enum    SchemaTypeEnum = "enum"
	SchemaType_Ref     SchemaTypeEnum = "ref"
)

var (
	SchemaTypeEnums = []SchemaTypeEnum{
		SchemaType_Boolean,
		SchemaType_Int,
		SchemaType_Long,
		SchemaType_Float,
		SchemaType_Double,
		SchemaType_Byte,
		SchemaType_String,
		SchemaType_Complex,
		SchemaType_Enum,
		SchemaType_Ref,
	}
)

func IsSchemaTypeEnum(v string) bool {
	var f bool

	for _, e := range SchemaTypeEnums {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func SchemaTypeEnumParse(v string) (SchemaTypeEnum, error) {
	var o SchemaTypeEnum
	var f bool
	n := strings.ToLower(v)

	for _, e := range SchemaTypeEnums {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrSchemaTypeEnumNotFound(v)
	}

	return o, nil
}

func ErrSchemaTypeEnumNotFound(v string) error {
	var ss []string

	for _, e := range SchemaTypeEnums {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t SchemaTypeEnum) String() string {
	return string(t)
}

func (t SchemaTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal([]byte(t))
}

func (t *SchemaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := SchemaTypeEnumParse(s)

	if err != nil {
		return err
	}

	t = &e

	return nil
}
