////////////////////////////////////////////////////////////////////////
// Generated by bounded/enumeration
////////////////////////////////////////////////////////////////////////

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

type LanguageExtEnum string

const (
	LanguageExt_Css     LanguageExtEnum = "css"
	LanguageExt_Go      LanguageExtEnum = "go"
	LanguageExt_Html    LanguageExtEnum = "html"
	LanguageExt_Js      LanguageExtEnum = "js"
	LanguageExt_Mod     LanguageExtEnum = "mod"
	LanguageExt_Ts      LanguageExtEnum = "ts"
	LanguageExt_Unknown LanguageExtEnum = "unknown"
)

var (
	LanguageExtEnums = []LanguageExtEnum{
		LanguageExt_Css,
		LanguageExt_Go,
		LanguageExt_Html,
		LanguageExt_Js,
		LanguageExt_Mod,
		LanguageExt_Ts,
		LanguageExt_Unknown,
	}
)

func IsLanguageExtEnum(v string) bool {
	var f bool

	for _, e := range LanguageExtEnums {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func LanguageExtEnumParse(v string) (LanguageExtEnum, error) {
	var o LanguageExtEnum
	var f bool
	n := strings.ToLower(v)

	for _, e := range LanguageExtEnums {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrLanguageExtEnumNotFound(v)
	}

	return o, nil
}

func ErrLanguageExtEnumNotFound(v string) error {
	var ss []string

	for _, e := range LanguageExtEnums {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t LanguageExtEnum) String() string {
	return string(t)
}

func (t LanguageExtEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal([]byte(t))
}

func (t *LanguageExtEnum) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := LanguageExtEnumParse(s)

	if err != nil {
		return err
	}

	t = &e

	return nil
}
